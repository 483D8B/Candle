
# A very simple Bottle Hello World app for you to get started with...
from bottle import default_app, route, static_file, request, template, HTTPResponse, response, hook, abort
import datetime
import os
import mysql.connector
import jwt
from jwt.exceptions import DecodeError,ExpiredSignatureError
from dotenv import load_dotenv
import subprocess
import logging


application = default_app()

# Set the path to the .env file
dotenv_path = '/home/483d8b/sec.env'

load_dotenv(dotenv_path)


SECRET_KEY = os.getenv('SECRET_KEY')
PASSWORD = os.getenv('PASSWORD')
user1 = os.getenv('USER1')
pass1 = os.getenv('PASS1')
host = os.getenv('HOST')
user = os.getenv('USER')
passwd = os.getenv('PASSWD')
database = os.getenv('DATABASE')
japscoredb = os.getenv('JAPSCOREDB')
readingdb = os.getenv('READINGSCOREDB')
timerdb = os.getenv('TIMERDB')



@route('/login', method='POST')
def login():
    password = request.forms.get('password')
    if password == 'pimpa':  # Replace this with your actual password
        token = jwt.encode({
            'user': user1,  # Replace this with your actual username
            'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=90)
        }, SECRET_KEY)
        return {'token': token}
    else:
        abort(401, 'Invalid password')



@application.hook('after_request')
def enable_cors():
    allowed_origins = ['https://site.github.io', 'http://127.0.0.1:1111']
    request_origin = request.headers.get('Origin')

    if request_origin in allowed_origins:
        response.headers['Access-Control-Allow-Origin'] = request_origin

    response.headers['Access-Control-Allow-Methods'] = 'PUT, GET, POST, DELETE, OPTIONS'
    response.headers['Access-Control-Allow-Headers'] = 'Origin, Accept, Content-Type, X-Requested-With, X-CSRF-Token, Authorization'


def verify_token():
    auth_header = request.headers.get('Authorization')
    if not auth_header:
        abort(401, 'Missing Authorization Header')
    parts = auth_header.split()
    if parts[0].lower() != 'bearer':
        abort(401, 'Invalid Authorization Header')
    elif len(parts) == 1:
        abort(401, 'Invalid Authorization Header')
    elif len(parts) > 2:
        abort(401, 'Invalid Authorization Header')

    token = parts[1]
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
    except DecodeError:
        abort(401, 'Invalid Token')
    except ExpiredSignatureError:
        abort(401, 'Expired Token')

@route('/addVocab', method=['OPTIONS', 'POST'])
def add_vocab():
    if request.method == 'OPTIONS':
        return {}
    else:
        verify_token()
        data = request.json

        # Validate the data
        for item in data:
            if not all(key in item for key in ('vocab', 'meaning', 'pronounce')):
                return {'status': 'error', 'message': 'Invalid data format.'}
            if not isinstance(item['vocab'], str) or not isinstance(item['meaning'], str) or not isinstance(item['pronounce'], str):
                return {'status': 'error', 'message': 'Invalid data type.'}

        # Establish a connection to your MySQL database
        cnx = mysql.connector.connect(user=user, password=passwd,
                                      host=host, database=database)

        cursor = cnx.cursor()

        # Insert the data into the database
        add_vocab = ("INSERT INTO Vocabulary "
                     "(vocab, meaning, pronounce) "
                     "VALUES (%s, %s, %s)")
        #vocab_data = (data['vocab'], data['meaning'], data['pronounce'])
        vocab_data = [(item['vocab'], item['meaning'], item['pronounce']) for item in data]

        cursor.executemany(add_vocab, vocab_data)

        # Commit the changes and close the connection
        cnx.commit()
        cursor.close()
        cnx.close()

        return {'status': 'success'}


DATABASE_MAPPING = {

    'readingBoard': readingdb,
    'japBoard' : japscoredb
}


@route('/addScore/<dbname>', method=['OPTIONS', 'POST'])
def add_score(dbname):
    if dbname not in DATABASE_MAPPING:
        return {'status': 'error', 'message': 'Invalid database.'}

    real_dbname = DATABASE_MAPPING[dbname]

    if request.method == 'OPTIONS':
        return {}
    else:
        data = request.json

        # Validate the data
        for item in data:
            if not all(key in item for key in ('country', 'points', 'league')):
                return {'status': 'error', 'message': 'Invalid data format.'}
            if not isinstance(item['country'], str) or not isinstance(item['points'], int) or not isinstance(item['league'], str):
                return {'status': 'error', 'message': 'Invalid data type.'}

        # Establish a connection to your MySQL database
        cnx = mysql.connector.connect(user=user, password=passwd,
                              host=host, database=real_dbname)

        cursor = cnx.cursor()

        # Insert or update the data in the database
        for item in data:
            cursor.execute("""
                INSERT INTO Leaderboards (league_id, country_id, points)
                SELECT Leagues.id, Countries.id, %s
                FROM Leagues, Countries
                WHERE Leagues.id = %s AND Countries.name = %s
                ON DUPLICATE KEY UPDATE points = points + VALUES(points)
            """, (item['points'], item['league'], item['country']))

        # Commit the changes and close the connection
        cnx.commit()
        cursor.close()
        cnx.close()

        return {'status': 'success', 'message': 'Score added!'}


@route('/updateLeagues', method=['OPTIONS', 'POST'])
def update_leagues():
    if request.method == 'OPTIONS':
        return {}
    else:
        # Establish a connection to your MySQL database
        cnx = mysql.connector.connect(user=user, password=passwd,
                                      host=host, database=japscoredb)

        cursor = cnx.cursor()

        # Fetch the current points and leagues from the database
        cursor.execute("""
            SELECT country_id, points, league_id
            FROM Leaderboards
        """)
        entries = cursor.fetchall()

        # Sort the entries by points in descending order
        entries.sort(key=lambda x: x[1], reverse=True)

        # Calculate 20% of the leaderboard size
        twenty_percent = int(len(entries) * 0.2)

        # Increase the league of the top 20%
        for i in range(twenty_percent):
            cursor.execute("""
                UPDATE Leaderboards
                SET league_id = league_id + 1
                WHERE country_id = %s
            """, (entries[i][0],))

        # Decrease the league of the bottom 20%, but not less than 1
        for i in range(-1, -twenty_percent - 1, -1):
            cursor.execute("""
                UPDATE Leaderboards
                SET league_id = GREATEST(1, league_id - 1)
                WHERE country_id = %s
            """, (entries[i][0],))

        # Reset the points for all rows
        cursor.execute("""
            UPDATE Leaderboards
            SET points = 0
        """)

        # Commit the changes and close the connection
        cnx.commit()
        cursor.close()
        cnx.close()

        return {'status': 'success', 'message': 'Leagues updated!'}



@route('/addLeagues', method=['OPTIONS', 'POST'])
def add_leagues():
    if request.method == 'OPTIONS':
        return {}
    else:
        data = request.json

        # Establish a connection to your MySQL database
        cnx = mysql.connector.connect(user=user, password=passwd,
                                      host=host, database=japscoredb)

        cursor = cnx.cursor()

        # Insert the league names into the Leagues table
        for league in data:
            cursor.execute("SELECT * FROM Leagues WHERE name = %s", (league,))
            result = cursor.fetchone()
            if not result:
                cursor.execute("INSERT INTO Leagues (name) VALUES (%s)", (league,))

        # Commit the changes and close the connection
        cnx.commit()
        cursor.close()
        cnx.close()

        return {'status': 'success'}

@route('/addCountries', method=['OPTIONS', 'POST'])
def add_countries():
    if request.method == 'OPTIONS':
        return {}
    else:
        data = request.json

        # Validate the data
        for item in data:
            if not isinstance(item, dict) or 'name' not in item or 'flag' not in item:
                return {'status': 'error', 'message': 'Invalid data format.'}
            if not isinstance(item['name'], str) or not isinstance(item['flag'], str):
                return {'status': 'error', 'message': 'Invalid data type.'}

        # Establish a connection to your MySQL database
        cnx = mysql.connector.connect(user=user, password=passwd,
                                      host=host, database=japscoredb)

        cursor = cnx.cursor()

        # Insert the data into the database
        for item in data:
            cursor.execute("""
                INSERT INTO Countries (name, flag)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE name = VALUES(name), flag = VALUES(flag)
            """, (item['name'], item['flag']))

        # Commit the changes and close the connection
        cnx.commit()
        cursor.close()
        cnx.close()

        return {'status': 'success'}





# Define a function to check credentials
def check_credentials(username, password):
    if username == user1 and password == pass1:
        return True
    return False

def check_db_connection():
    try:
        conn = mysql.connector.connect(
        host=host,
        user=user,
        passwd=passwd,
        database=database
        )
        return True
    except mysql.connector.Error as e:
        return False




@route('/display_table')
def display_table():
    db = mysql.connector.connect(
        host=host,
        user=user,
        passwd=passwd,
        database=database
    )
    cursor = db.cursor()
    cursor.execute("SELECT * FROM Vocabulary")
    rows = cursor.fetchall()

    template_path = '/home/483d8b/mysite/'  # Specify the absolute path to the template directory
    return template(template_path + 'show_table.tpl',rows=rows)





TEMPLATE_MAPPING = {
    'readingBoard': 'reading.tpl',
    'japBoard' : 'show_leaderboards.tpl'
}

BOARDS_MAPPING = {
    'jap': 'japBoard',
    'reading': 'readingBoard'
}


@route('/showBoard/<simplename>')
def display_leaderboard(simplename):
    if simplename not in BOARDS_MAPPING:
        return {'status': 'error'}

    dbname = BOARDS_MAPPING[simplename]

    real_dbname = DATABASE_MAPPING[dbname]
    tpl = TEMPLATE_MAPPING.get(dbname, 'default.tpl')  # Use a default template if dbname is not found in TEMPLATE_MAPPING

    db = mysql.connector.connect(
        host=host,
        user=user,
        passwd=passwd,
        database=real_dbname,
        charset='utf8mb4'
    )
    cursor = db.cursor()
    cursor.execute("""
        SELECT Leagues.name, Countries.name, Countries.flag, Leaderboards.points
        FROM Leaderboards
        JOIN Leagues ON Leaderboards.league_id = Leagues.id
        JOIN Countries ON Leaderboards.country_id = Countries.id
        ORDER BY Leaderboards.points DESC;
    """)
    rows = cursor.fetchall()

    # Mapping of league names to image URLs
    league_images = {
        "Bronze": "https://site/static/Badge_Bronze_Blank.webp",
        "Silver": "https://site/static/Badge_Silver_Blank.webp",
        "Gold": "https://site/static/Badge_Gold_Blank.webp",
        "Sapphire": "https://site/static/Badge_Sapphire_Blank.webp",
        "Ruby": "https://site/static/Badge_Ruby_Blank.webp",
        "Emerald": "https://site/static/Badge_Emerald_Blank.webp",
        "Amethyst": "https://site/static/Badge_Amethyst_Blank.webp",
        "Pearl": "https://site/static/Badge_Pearl_Blank.webp",
        "Obsidian": "https://site/static/Badge_Obsidian_Blank.webp",
        "Diamond": "https://site/static/Badge_Diamond_Blank.webp"
    }

    # Add the image URLs to the rows
    rows = [(league_images[row[0]], row[1], row[2], row[3] , row[0]) for row in rows]

    # Calculate the index for the top 20%
    top20Count = int(len(rows) * 0.2)

    template_path = '/home/483d8b/mysite/'  # Specify the absolute path to the template directory
    return template(template_path + tpl, rows=rows,  top20Count=top20Count)



path = os.path.abspath(__file__)
dir_path = os.path.dirname(path)

@route('/')
def landing_page():
    # Use custom authentication logic to protect this route
    auth = request.auth
    if auth:
        username, password = auth
        if check_credentials(username, password):
            template_path = '/home/483d8b/mysite/'
            # Render the "landingPage.html" template
            return template(template_path + 'landingPage.html')

    response = HTTPResponse(status=401)
    response.add_header('WWW-Authenticate', 'Basic realm="Protected Area"')
    return response

@route('/db')
def index():
    is_connected = check_db_connection()
    if is_connected:
        return "Db connected"
    else:
        return "db NOT CONNECTED"


@route('/index.html')
def serve_site():
    return static_file('index.html', root='./mysite/static/b7a875fc1ea228b9061041b7cec4bd3c52ab3ce3')


@route('/leitner.js')
def serve_js():
    return static_file('leitner.js', root='./mysite')

@route('/leitner.min.js')
def serve_minjs():
    return static_file('leitner.min.js', root='./mysite')

@route('/output.js')
def serve_sentencesjs():
    return static_file('output.js', root='./sentenceData')

@route('/upload')
def upload_form():
    template_path = '/home/483d8b/mysite/'  # Specify the absolute path to the template directory
    return template(template_path + 'upload_form.tpl')

@route('/upload', method='POST')
def do_upload():
    password = request.forms.get('password')

    if password == PASSWORD:
        upload = request.files.get('upload')
        if upload:
            # Check if the uploaded file is a CSV file
            name, ext = os.path.splitext(upload.filename)
            if ext != '.csv':
                return 'Invalid file type. Please upload a CSV file.'

            # Get the current date in the format YYYY-MM-DD
            current_date = datetime.datetime.now().strftime('%Y-%m-%d')

            # Append the date to the uploaded file's name
            new_filename = f'koohii_{current_date}.csv'

            # Save the uploaded file with the new filename
            upload.save('/home/483d8b/mysite/' + new_filename)

            success_message = f'File {new_filename} uploaded successfully. Redirecting to the upload page...'


            # Redirect to the /upload route after 5 seconds
            return f'''
            <html>
            <head>
                <meta http-equiv="refresh" content="5;url=/upload">
            </head>
            <body>
                {success_message}
            </body>
            </html>
            '''
        else:
            return 'No file selected for upload.'
    else:
        return 'Incorrect password. Upload failed.'


# Define the directory where uploaded files will be saved
SENTENCEFILE_UPLOAD_DIR = "/home/483d8b/sentenceData/"

# Define the maximum allowed file size (in bytes)
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB


@route('/up', method='POST')
def upload_sentences():
    password = request.forms.get('password')

    if password == PASSWORD:
        upload = request.files.get('upload')
        if upload:
            # Check if the uploaded file is a CSV file
            name, ext = os.path.splitext(upload.filename)
            if ext.lower() != '.csv' and ext.lower() != '.txt':
                return 'Invalid file type. Please upload a CSV file.'


            # Append the date to the uploaded file's name
            new_filename = 'grs.csv'

            full_file_path = os.path.join(SENTENCEFILE_UPLOAD_DIR, new_filename)

            # Check if grs.csv file exists and delete it
            if os.path.isfile(full_file_path):
                os.remove(full_file_path)

            # Save the uploaded file with the new filename
            upload.save(SENTENCEFILE_UPLOAD_DIR + new_filename)

            success_message = f'File {new_filename} uploaded successfully. Redirecting to the upload page...'


            subprocess.run(["/usr/local/bin/python3.10", "/home/483d8b/sentenceData/gen.py"])


            # Redirect to the /up route after 5 seconds
            return f'''
            <html>
            <head>
                <meta http-equiv="refresh" content="5;url=/up">
            </head>
            <body>
                {success_message}
            </body>
            </html>
            '''
        else:
            return 'No file selected for upload.'
    else:
        return 'Incorrect password. Upload failed.'

@route('/up')
def upload_sentence_form():
    template_path = '/home/483d8b/sentenceData/'
    return template(template_path + 'upload_sentence_form.tpl')


@route('/addTime', method=['OPTIONS', 'POST'])
def add_timer():
    if request.method == 'OPTIONS':
        return {}
    else:
        verify_token()
        data = request.json


        # Establish a connection to your MySQL database
        cnx = mysql.connector.connect(user=user, password=passwd,
                                      host=host, database=timerdb)

        cursor = cnx.cursor()

        # Insert the data into the database
        add_timer = ("INSERT INTO PomodoroSessions "
                     "(StartDateTime, WorkMinutes, PauseCount) "
                     "VALUES (%s, %s, %s)")

        # Loop over the array of objects
        for session in data:
            # Validate the data
            if not all(key in session for key in ('startDateTimer', 'totalPomodoroTime', 'pauseCount')):
                return {'status': 'error', 'message': 'Invalid data format.'}
            if not isinstance(session['startDateTimer'], str) or not isinstance(session['totalPomodoroTime'], int) or not isinstance(session['pauseCount'], int):
                return {'status': 'error', 'message': 'Invalid data type.'}

            timer_data = (session['startDateTimer'], session['totalPomodoroTime'], session['pauseCount'])

            cursor.execute(add_timer, timer_data)

        # Commit the changes and close the connection
        cnx.commit()
        cursor.close()
        cnx.close()

        return {'status': 'success :)'}






@route('/static/<filename:path>')
def serve_static(filename):
    return static_file(filename, root='./mysite/static')

